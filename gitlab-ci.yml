default:
  image:
    name: python:3.8
    
stages:
  - build
  - test
  - deploy

variables:
  CI_DEBUG_TRACE: "false"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

docker_build:
  image: docker:19.03.12
  stage: build
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $IMAGE_TAG --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
  rules:
    - if: $CI_COMMIT_TAG
     
test_app:
  stage: test
  script:
    - apt-get update -qy
    - apt-get install -y python-dev python-pip
    - pip install -r requirements.txt
    - python main.py test
    
deploy_development:
  stage: deploy
  script:
    - echo "Deploy to development server"
    - python3.8 -m pip install configparser
     - python3.8 -m pip install pipeline
    - python3.8 -m pip install logging
    - python3.8 -m pip install pandas
    - python3.8 -m pip install psycopg2
    - python3.8 -m pip install pyspark.sql.functions
      - python3.8 -m pip install pyspark.sql.types

    - /bin/bash ./scripts/deploy.sh
  environment:
    name: development
    url: https://$CI_ENVIRONMENT_SLUG.example.com
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev-tushar"'
    
deploy_staging:
  stage: deploy
  script:
    - echo "Deploy to staging server"
    - python3.8 -m pip install configparser
      - python3.8 -m pip install pipeline
      - python3.8 -m pip install logging
      - python3.8 -m pip install pandas
      - python3.8 -m pip install psycopg2
      - python3.8 -m pip install pyspark.sql.functions
      - python3.8 -m pip install pyspark.sql.types

    - /bin/bash ./scripts/deploy.sh
  environment:
    name: staging
    url: https://$CI_ENVIRONMENT_SLUG.example.com
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
    
deploy_production:
  stage: deploy
  script:
    - echo "Deploy to production server"
    - python3.8 -m pip install configparser
      - python3.8 -m pip install pipeline
      - python3.8 -m pip install logging
      - python3.8 -m pip install pandas
      - python3.8 -m pip install psycopg2
      - python3.8 -m pip install pyspark.sql.functions
      - python3.8 -m pip install pyspark.sql.types

    - /bin/bash ./scripts/deploy.sh
  environment:
    name: production
    url: https://$CI_ENVIRONMENT_SLUG.example.com
  when: manual
  rules:
    - if: $CI_COMMIT_TAG